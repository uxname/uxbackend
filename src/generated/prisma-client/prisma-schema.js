module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type ActivationCode {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  valid_until: DateTime!
  code: String!
}

type ActivationCodeConnection {
  pageInfo: PageInfo!
  edges: [ActivationCodeEdge]!
  aggregate: AggregateActivationCode!
}

input ActivationCodeCreateInput {
  id: ID
  email: String!
  valid_until: DateTime!
  code: String!
}

type ActivationCodeEdge {
  node: ActivationCode!
  cursor: String!
}

enum ActivationCodeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  valid_until_ASC
  valid_until_DESC
  code_ASC
  code_DESC
}

type ActivationCodePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  valid_until: DateTime!
  code: String!
}

type ActivationCodeSubscriptionPayload {
  mutation: MutationType!
  node: ActivationCode
  updatedFields: [String!]
  previousValues: ActivationCodePreviousValues
}

input ActivationCodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActivationCodeWhereInput
  AND: [ActivationCodeSubscriptionWhereInput!]
  OR: [ActivationCodeSubscriptionWhereInput!]
  NOT: [ActivationCodeSubscriptionWhereInput!]
}

input ActivationCodeUpdateInput {
  email: String
  valid_until: DateTime
  code: String
}

input ActivationCodeUpdateManyMutationInput {
  email: String
  valid_until: DateTime
  code: String
}

input ActivationCodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  valid_until: DateTime
  valid_until_not: DateTime
  valid_until_in: [DateTime!]
  valid_until_not_in: [DateTime!]
  valid_until_lt: DateTime
  valid_until_lte: DateTime
  valid_until_gt: DateTime
  valid_until_gte: DateTime
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  AND: [ActivationCodeWhereInput!]
  OR: [ActivationCodeWhereInput!]
  NOT: [ActivationCodeWhereInput!]
}

input ActivationCodeWhereUniqueInput {
  id: ID
  email: String
}

type AggregateActivationCode {
  count: Int!
}

type AggregateBlockList {
  count: Int!
}

type AggregateCategory {
  count: Int!
}

type AggregateConversation {
  count: Int!
}

type AggregateConversationParticipant {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateRestoreCode {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BlockList {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  blockedUser: User!
}

type BlockListConnection {
  pageInfo: PageInfo!
  edges: [BlockListEdge]!
  aggregate: AggregateBlockList!
}

input BlockListCreateInput {
  id: ID
  user: UserCreateOneInput!
  blockedUser: UserCreateOneInput!
}

type BlockListEdge {
  node: BlockList!
  cursor: String!
}

enum BlockListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BlockListPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BlockListSubscriptionPayload {
  mutation: MutationType!
  node: BlockList
  updatedFields: [String!]
  previousValues: BlockListPreviousValues
}

input BlockListSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlockListWhereInput
  AND: [BlockListSubscriptionWhereInput!]
  OR: [BlockListSubscriptionWhereInput!]
  NOT: [BlockListSubscriptionWhereInput!]
}

input BlockListUpdateInput {
  user: UserUpdateOneRequiredInput
  blockedUser: UserUpdateOneRequiredInput
}

input BlockListWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  blockedUser: UserWhereInput
  AND: [BlockListWhereInput!]
  OR: [BlockListWhereInput!]
  NOT: [BlockListWhereInput!]
}

input BlockListWhereUniqueInput {
  id: ID
}

type Category {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  subcategories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  id: ID
  title: String!
  description: String
  subcategories: CategoryCreateManyInput
  products: ProductCreateManyWithoutCategoriesInput
}

input CategoryCreateManyInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateManyWithoutProductsInput {
  create: [CategoryCreateWithoutProductsInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CategoryCreateWithoutProductsInput {
  id: ID
  title: String!
  description: String
  subcategories: CategoryCreateManyInput
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type CategoryPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
}

input CategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  NOT: [CategoryScalarWhereInput!]
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateDataInput {
  title: String
  description: String
  subcategories: CategoryUpdateManyInput
  products: ProductUpdateManyWithoutCategoriesInput
}

input CategoryUpdateInput {
  title: String
  description: String
  subcategories: CategoryUpdateManyInput
  products: ProductUpdateManyWithoutCategoriesInput
}

input CategoryUpdateManyDataInput {
  title: String
  description: String
}

input CategoryUpdateManyInput {
  create: [CategoryCreateInput!]
  update: [CategoryUpdateWithWhereUniqueNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueNestedInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyMutationInput {
  title: String
  description: String
}

input CategoryUpdateManyWithoutProductsInput {
  create: [CategoryCreateWithoutProductsInput!]
  delete: [CategoryWhereUniqueInput!]
  connect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  disconnect: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
  deleteMany: [CategoryScalarWhereInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  where: CategoryScalarWhereInput!
  data: CategoryUpdateManyDataInput!
}

input CategoryUpdateWithoutProductsDataInput {
  title: String
  description: String
  subcategories: CategoryUpdateManyInput
}

input CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateDataInput!
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateWithoutProductsDataInput!
}

input CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateDataInput!
  create: CategoryCreateInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput!
  update: CategoryUpdateWithoutProductsDataInput!
  create: CategoryCreateWithoutProductsInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  subcategories_every: CategoryWhereInput
  subcategories_some: CategoryWhereInput
  subcategories_none: CategoryWhereInput
  products_every: ProductWhereInput
  products_some: ProductWhereInput
  products_none: ProductWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Conversation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  creator: User!
  participants(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConversationParticipant!]
  conversationType: ConversationType!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type ConversationConnection {
  pageInfo: PageInfo!
  edges: [ConversationEdge]!
  aggregate: AggregateConversation!
}

input ConversationCreateInput {
  id: ID
  title: String
  creator: UserCreateOneInput!
  participants: ConversationParticipantCreateManyWithoutConversationInput
  conversationType: ConversationType!
  messages: MessageCreateManyWithoutConversationInput
}

input ConversationCreateOneWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateOneWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput
  connect: ConversationWhereUniqueInput
}

input ConversationCreateWithoutMessagesInput {
  id: ID
  title: String
  creator: UserCreateOneInput!
  participants: ConversationParticipantCreateManyWithoutConversationInput
  conversationType: ConversationType!
}

input ConversationCreateWithoutParticipantsInput {
  id: ID
  title: String
  creator: UserCreateOneInput!
  conversationType: ConversationType!
  messages: MessageCreateManyWithoutConversationInput
}

type ConversationEdge {
  node: Conversation!
  cursor: String!
}

enum ConversationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  conversationType_ASC
  conversationType_DESC
}

type ConversationParticipant {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  conversation: Conversation!
  role: ConversationParticipantRole!
}

type ConversationParticipantConnection {
  pageInfo: PageInfo!
  edges: [ConversationParticipantEdge]!
  aggregate: AggregateConversationParticipant!
}

input ConversationParticipantCreateInput {
  id: ID
  user: UserCreateOneWithoutConversationsInput!
  conversation: ConversationCreateOneWithoutParticipantsInput!
  role: ConversationParticipantRole
}

input ConversationParticipantCreateManyWithoutConversationInput {
  create: [ConversationParticipantCreateWithoutConversationInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
}

input ConversationParticipantCreateManyWithoutUserInput {
  create: [ConversationParticipantCreateWithoutUserInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
}

input ConversationParticipantCreateWithoutConversationInput {
  id: ID
  user: UserCreateOneWithoutConversationsInput!
  role: ConversationParticipantRole
}

input ConversationParticipantCreateWithoutUserInput {
  id: ID
  conversation: ConversationCreateOneWithoutParticipantsInput!
  role: ConversationParticipantRole
}

type ConversationParticipantEdge {
  node: ConversationParticipant!
  cursor: String!
}

enum ConversationParticipantOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  role_ASC
  role_DESC
}

type ConversationParticipantPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: ConversationParticipantRole!
}

enum ConversationParticipantRole {
  MEMBER
  ADMIN
}

input ConversationParticipantScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  role: ConversationParticipantRole
  role_not: ConversationParticipantRole
  role_in: [ConversationParticipantRole!]
  role_not_in: [ConversationParticipantRole!]
  AND: [ConversationParticipantScalarWhereInput!]
  OR: [ConversationParticipantScalarWhereInput!]
  NOT: [ConversationParticipantScalarWhereInput!]
}

type ConversationParticipantSubscriptionPayload {
  mutation: MutationType!
  node: ConversationParticipant
  updatedFields: [String!]
  previousValues: ConversationParticipantPreviousValues
}

input ConversationParticipantSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConversationParticipantWhereInput
  AND: [ConversationParticipantSubscriptionWhereInput!]
  OR: [ConversationParticipantSubscriptionWhereInput!]
  NOT: [ConversationParticipantSubscriptionWhereInput!]
}

input ConversationParticipantUpdateInput {
  user: UserUpdateOneRequiredWithoutConversationsInput
  conversation: ConversationUpdateOneRequiredWithoutParticipantsInput
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateManyDataInput {
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateManyMutationInput {
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateManyWithoutConversationInput {
  create: [ConversationParticipantCreateWithoutConversationInput!]
  delete: [ConversationParticipantWhereUniqueInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
  set: [ConversationParticipantWhereUniqueInput!]
  disconnect: [ConversationParticipantWhereUniqueInput!]
  update: [ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput!]
  upsert: [ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput!]
  deleteMany: [ConversationParticipantScalarWhereInput!]
  updateMany: [ConversationParticipantUpdateManyWithWhereNestedInput!]
}

input ConversationParticipantUpdateManyWithoutUserInput {
  create: [ConversationParticipantCreateWithoutUserInput!]
  delete: [ConversationParticipantWhereUniqueInput!]
  connect: [ConversationParticipantWhereUniqueInput!]
  set: [ConversationParticipantWhereUniqueInput!]
  disconnect: [ConversationParticipantWhereUniqueInput!]
  update: [ConversationParticipantUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ConversationParticipantUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ConversationParticipantScalarWhereInput!]
  updateMany: [ConversationParticipantUpdateManyWithWhereNestedInput!]
}

input ConversationParticipantUpdateManyWithWhereNestedInput {
  where: ConversationParticipantScalarWhereInput!
  data: ConversationParticipantUpdateManyDataInput!
}

input ConversationParticipantUpdateWithoutConversationDataInput {
  user: UserUpdateOneRequiredWithoutConversationsInput
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateWithoutUserDataInput {
  conversation: ConversationUpdateOneRequiredWithoutParticipantsInput
  role: ConversationParticipantRole
}

input ConversationParticipantUpdateWithWhereUniqueWithoutConversationInput {
  where: ConversationParticipantWhereUniqueInput!
  data: ConversationParticipantUpdateWithoutConversationDataInput!
}

input ConversationParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: ConversationParticipantWhereUniqueInput!
  data: ConversationParticipantUpdateWithoutUserDataInput!
}

input ConversationParticipantUpsertWithWhereUniqueWithoutConversationInput {
  where: ConversationParticipantWhereUniqueInput!
  update: ConversationParticipantUpdateWithoutConversationDataInput!
  create: ConversationParticipantCreateWithoutConversationInput!
}

input ConversationParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: ConversationParticipantWhereUniqueInput!
  update: ConversationParticipantUpdateWithoutUserDataInput!
  create: ConversationParticipantCreateWithoutUserInput!
}

input ConversationParticipantWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  conversation: ConversationWhereInput
  role: ConversationParticipantRole
  role_not: ConversationParticipantRole
  role_in: [ConversationParticipantRole!]
  role_not_in: [ConversationParticipantRole!]
  AND: [ConversationParticipantWhereInput!]
  OR: [ConversationParticipantWhereInput!]
  NOT: [ConversationParticipantWhereInput!]
}

input ConversationParticipantWhereUniqueInput {
  id: ID
}

type ConversationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String
  conversationType: ConversationType!
}

type ConversationSubscriptionPayload {
  mutation: MutationType!
  node: Conversation
  updatedFields: [String!]
  previousValues: ConversationPreviousValues
}

input ConversationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConversationWhereInput
  AND: [ConversationSubscriptionWhereInput!]
  OR: [ConversationSubscriptionWhereInput!]
  NOT: [ConversationSubscriptionWhereInput!]
}

enum ConversationType {
  SINGLE
  GROUP
}

input ConversationUpdateInput {
  title: String
  creator: UserUpdateOneRequiredInput
  participants: ConversationParticipantUpdateManyWithoutConversationInput
  conversationType: ConversationType
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpdateManyMutationInput {
  title: String
  conversationType: ConversationType
}

input ConversationUpdateOneRequiredWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput
  update: ConversationUpdateWithoutMessagesDataInput
  upsert: ConversationUpsertWithoutMessagesInput
  connect: ConversationWhereUniqueInput
}

input ConversationUpdateOneRequiredWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput
  update: ConversationUpdateWithoutParticipantsDataInput
  upsert: ConversationUpsertWithoutParticipantsInput
  connect: ConversationWhereUniqueInput
}

input ConversationUpdateWithoutMessagesDataInput {
  title: String
  creator: UserUpdateOneRequiredInput
  participants: ConversationParticipantUpdateManyWithoutConversationInput
  conversationType: ConversationType
}

input ConversationUpdateWithoutParticipantsDataInput {
  title: String
  creator: UserUpdateOneRequiredInput
  conversationType: ConversationType
  messages: MessageUpdateManyWithoutConversationInput
}

input ConversationUpsertWithoutMessagesInput {
  update: ConversationUpdateWithoutMessagesDataInput!
  create: ConversationCreateWithoutMessagesInput!
}

input ConversationUpsertWithoutParticipantsInput {
  update: ConversationUpdateWithoutParticipantsDataInput!
  create: ConversationCreateWithoutParticipantsInput!
}

input ConversationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  creator: UserWhereInput
  participants_every: ConversationParticipantWhereInput
  participants_some: ConversationParticipantWhereInput
  participants_none: ConversationParticipantWhereInput
  conversationType: ConversationType
  conversationType_not: ConversationType
  conversationType_in: [ConversationType!]
  conversationType_not_in: [ConversationType!]
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  AND: [ConversationWhereInput!]
  OR: [ConversationWhereInput!]
  NOT: [ConversationWhereInput!]
}

input ConversationWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  conversation: Conversation!
  sender: User!
  messageType: MessageType!
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  conversation: ConversationCreateOneWithoutMessagesInput!
  sender: UserCreateOneInput!
  messageType: MessageType
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageCreateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutConversationInput {
  id: ID
  sender: UserCreateOneInput!
  messageType: MessageType
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  messageType_ASC
  messageType_DESC
  message_ASC
  message_DESC
  attachmentThumbUrl_ASC
  attachmentThumbUrl_DESC
  attachmentUrl_ASC
  attachmentUrl_DESC
  isDeleted_ASC
  isDeleted_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  messageType: MessageType!
  message: String!
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  messageType: MessageType
  messageType_not: MessageType
  messageType_in: [MessageType!]
  messageType_not_in: [MessageType!]
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  attachmentThumbUrl: String
  attachmentThumbUrl_not: String
  attachmentThumbUrl_in: [String!]
  attachmentThumbUrl_not_in: [String!]
  attachmentThumbUrl_lt: String
  attachmentThumbUrl_lte: String
  attachmentThumbUrl_gt: String
  attachmentThumbUrl_gte: String
  attachmentThumbUrl_contains: String
  attachmentThumbUrl_not_contains: String
  attachmentThumbUrl_starts_with: String
  attachmentThumbUrl_not_starts_with: String
  attachmentThumbUrl_ends_with: String
  attachmentThumbUrl_not_ends_with: String
  attachmentUrl: String
  attachmentUrl_not: String
  attachmentUrl_in: [String!]
  attachmentUrl_not_in: [String!]
  attachmentUrl_lt: String
  attachmentUrl_lte: String
  attachmentUrl_gt: String
  attachmentUrl_gte: String
  attachmentUrl_contains: String
  attachmentUrl_not_contains: String
  attachmentUrl_starts_with: String
  attachmentUrl_not_starts_with: String
  attachmentUrl_ends_with: String
  attachmentUrl_not_ends_with: String
  isDeleted: Boolean
  isDeleted_not: Boolean
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}

input MessageUpdateInput {
  conversation: ConversationUpdateOneRequiredWithoutMessagesInput
  sender: UserUpdateOneRequiredInput
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateManyDataInput {
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateManyMutationInput {
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateManyWithoutConversationInput {
  create: [MessageCreateWithoutConversationInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutConversationDataInput {
  sender: UserUpdateOneRequiredInput
  messageType: MessageType
  message: String
  attachmentThumbUrl: String
  attachmentUrl: String
  isDeleted: Boolean
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutConversationDataInput!
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutConversationDataInput!
  create: MessageCreateWithoutConversationInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  conversation: ConversationWhereInput
  sender: UserWhereInput
  messageType: MessageType
  messageType_not: MessageType
  messageType_in: [MessageType!]
  messageType_not_in: [MessageType!]
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  attachmentThumbUrl: String
  attachmentThumbUrl_not: String
  attachmentThumbUrl_in: [String!]
  attachmentThumbUrl_not_in: [String!]
  attachmentThumbUrl_lt: String
  attachmentThumbUrl_lte: String
  attachmentThumbUrl_gt: String
  attachmentThumbUrl_gte: String
  attachmentThumbUrl_contains: String
  attachmentThumbUrl_not_contains: String
  attachmentThumbUrl_starts_with: String
  attachmentThumbUrl_not_starts_with: String
  attachmentThumbUrl_ends_with: String
  attachmentThumbUrl_not_ends_with: String
  attachmentUrl: String
  attachmentUrl_not: String
  attachmentUrl_in: [String!]
  attachmentUrl_not_in: [String!]
  attachmentUrl_lt: String
  attachmentUrl_lte: String
  attachmentUrl_gt: String
  attachmentUrl_gte: String
  attachmentUrl_contains: String
  attachmentUrl_not_contains: String
  attachmentUrl_starts_with: String
  attachmentUrl_not_starts_with: String
  attachmentUrl_ends_with: String
  attachmentUrl_not_ends_with: String
  isDeleted: Boolean
  isDeleted_not: Boolean
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createActivationCode(data: ActivationCodeCreateInput!): ActivationCode!
  updateActivationCode(data: ActivationCodeUpdateInput!, where: ActivationCodeWhereUniqueInput!): ActivationCode
  updateManyActivationCodes(data: ActivationCodeUpdateManyMutationInput!, where: ActivationCodeWhereInput): BatchPayload!
  upsertActivationCode(where: ActivationCodeWhereUniqueInput!, create: ActivationCodeCreateInput!, update: ActivationCodeUpdateInput!): ActivationCode!
  deleteActivationCode(where: ActivationCodeWhereUniqueInput!): ActivationCode
  deleteManyActivationCodes(where: ActivationCodeWhereInput): BatchPayload!
  createBlockList(data: BlockListCreateInput!): BlockList!
  updateBlockList(data: BlockListUpdateInput!, where: BlockListWhereUniqueInput!): BlockList
  upsertBlockList(where: BlockListWhereUniqueInput!, create: BlockListCreateInput!, update: BlockListUpdateInput!): BlockList!
  deleteBlockList(where: BlockListWhereUniqueInput!): BlockList
  deleteManyBlockLists(where: BlockListWhereInput): BatchPayload!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createConversation(data: ConversationCreateInput!): Conversation!
  updateConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateManyConversations(data: ConversationUpdateManyMutationInput!, where: ConversationWhereInput): BatchPayload!
  upsertConversation(where: ConversationWhereUniqueInput!, create: ConversationCreateInput!, update: ConversationUpdateInput!): Conversation!
  deleteConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteManyConversations(where: ConversationWhereInput): BatchPayload!
  createConversationParticipant(data: ConversationParticipantCreateInput!): ConversationParticipant!
  updateConversationParticipant(data: ConversationParticipantUpdateInput!, where: ConversationParticipantWhereUniqueInput!): ConversationParticipant
  updateManyConversationParticipants(data: ConversationParticipantUpdateManyMutationInput!, where: ConversationParticipantWhereInput): BatchPayload!
  upsertConversationParticipant(where: ConversationParticipantWhereUniqueInput!, create: ConversationParticipantCreateInput!, update: ConversationParticipantUpdateInput!): ConversationParticipant!
  deleteConversationParticipant(where: ConversationParticipantWhereUniqueInput!): ConversationParticipant
  deleteManyConversationParticipants(where: ConversationParticipantWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createRestoreCode(data: RestoreCodeCreateInput!): RestoreCode!
  updateRestoreCode(data: RestoreCodeUpdateInput!, where: RestoreCodeWhereUniqueInput!): RestoreCode
  updateManyRestoreCodes(data: RestoreCodeUpdateManyMutationInput!, where: RestoreCodeWhereInput): BatchPayload!
  upsertRestoreCode(where: RestoreCodeWhereUniqueInput!, create: RestoreCodeCreateInput!, update: RestoreCodeUpdateInput!): RestoreCode!
  deleteRestoreCode(where: RestoreCodeWhereUniqueInput!): RestoreCode
  deleteManyRestoreCodes(where: RestoreCodeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Product {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category!]
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  id: ID
  title: String!
  description: String
  categories: CategoryCreateManyWithoutProductsInput
}

input ProductCreateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutCategoriesInput {
  id: ID
  title: String!
  description: String
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type ProductPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String
}

input ProductScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
  title: String
  description: String
  categories: CategoryUpdateManyWithoutProductsInput
}

input ProductUpdateManyDataInput {
  title: String
  description: String
}

input ProductUpdateManyMutationInput {
  title: String
  description: String
}

input ProductUpdateManyWithoutCategoriesInput {
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
  deleteMany: [ProductScalarWhereInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyDataInput!
}

input ProductUpdateWithoutCategoriesDataInput {
  title: String
  description: String
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCategoriesDataInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCategoriesDataInput!
  create: ProductCreateWithoutCategoriesInput!
}

input ProductWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  categories_every: CategoryWhereInput
  categories_some: CategoryWhereInput
  categories_none: CategoryWhereInput
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  id: ID
}

type Query {
  activationCode(where: ActivationCodeWhereUniqueInput!): ActivationCode
  activationCodes(where: ActivationCodeWhereInput, orderBy: ActivationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActivationCode]!
  activationCodesConnection(where: ActivationCodeWhereInput, orderBy: ActivationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivationCodeConnection!
  blockList(where: BlockListWhereUniqueInput!): BlockList
  blockLists(where: BlockListWhereInput, orderBy: BlockListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BlockList]!
  blockListsConnection(where: BlockListWhereInput, orderBy: BlockListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockListConnection!
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  conversation(where: ConversationWhereUniqueInput!): Conversation
  conversations(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conversation]!
  conversationsConnection(where: ConversationWhereInput, orderBy: ConversationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConversationConnection!
  conversationParticipant(where: ConversationParticipantWhereUniqueInput!): ConversationParticipant
  conversationParticipants(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConversationParticipant]!
  conversationParticipantsConnection(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConversationParticipantConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  restoreCode(where: RestoreCodeWhereUniqueInput!): RestoreCode
  restoreCodes(where: RestoreCodeWhereInput, orderBy: RestoreCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RestoreCode]!
  restoreCodesConnection(where: RestoreCodeWhereInput, orderBy: RestoreCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RestoreCodeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type RestoreCode {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  valid_until: DateTime!
  code: String!
}

type RestoreCodeConnection {
  pageInfo: PageInfo!
  edges: [RestoreCodeEdge]!
  aggregate: AggregateRestoreCode!
}

input RestoreCodeCreateInput {
  id: ID
  email: String!
  valid_until: DateTime!
  code: String!
}

type RestoreCodeEdge {
  node: RestoreCode!
  cursor: String!
}

enum RestoreCodeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  valid_until_ASC
  valid_until_DESC
  code_ASC
  code_DESC
}

type RestoreCodePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  valid_until: DateTime!
  code: String!
}

type RestoreCodeSubscriptionPayload {
  mutation: MutationType!
  node: RestoreCode
  updatedFields: [String!]
  previousValues: RestoreCodePreviousValues
}

input RestoreCodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RestoreCodeWhereInput
  AND: [RestoreCodeSubscriptionWhereInput!]
  OR: [RestoreCodeSubscriptionWhereInput!]
  NOT: [RestoreCodeSubscriptionWhereInput!]
}

input RestoreCodeUpdateInput {
  email: String
  valid_until: DateTime
  code: String
}

input RestoreCodeUpdateManyMutationInput {
  email: String
  valid_until: DateTime
  code: String
}

input RestoreCodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  valid_until: DateTime
  valid_until_not: DateTime
  valid_until_in: [DateTime!]
  valid_until_not_in: [DateTime!]
  valid_until_lt: DateTime
  valid_until_lte: DateTime
  valid_until_gt: DateTime
  valid_until_gte: DateTime
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  AND: [RestoreCodeWhereInput!]
  OR: [RestoreCodeWhereInput!]
  NOT: [RestoreCodeWhereInput!]
}

input RestoreCodeWhereUniqueInput {
  id: ID
  email: String
}

type Subscription {
  activationCode(where: ActivationCodeSubscriptionWhereInput): ActivationCodeSubscriptionPayload
  blockList(where: BlockListSubscriptionWhereInput): BlockListSubscriptionPayload
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  conversation(where: ConversationSubscriptionWhereInput): ConversationSubscriptionPayload
  conversationParticipant(where: ConversationParticipantSubscriptionWhereInput): ConversationParticipantSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  restoreCode(where: RestoreCodeSubscriptionWhereInput): RestoreCodeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  roles: [UserRole!]!
  password_hash: String!
  password_salt: String!
  avatar: String
  last_login_date: DateTime
  conversations(where: ConversationParticipantWhereInput, orderBy: ConversationParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConversationParticipant!]
  contacts(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  roles: UserCreaterolesInput
  password_hash: String!
  password_salt: String!
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantCreateManyWithoutUserInput
  contacts: UserCreateManyInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [UserRole!]
}

input UserCreateWithoutConversationsInput {
  id: ID
  email: String!
  roles: UserCreaterolesInput
  password_hash: String!
  password_salt: String!
  avatar: String
  last_login_date: DateTime
  contacts: UserCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_hash_ASC
  password_hash_DESC
  password_salt_ASC
  password_salt_DESC
  avatar_ASC
  avatar_DESC
  last_login_date_ASC
  last_login_date_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  roles: [UserRole!]!
  password_hash: String!
  password_salt: String!
  avatar: String
  last_login_date: DateTime
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password_hash: String
  password_hash_not: String
  password_hash_in: [String!]
  password_hash_not_in: [String!]
  password_hash_lt: String
  password_hash_lte: String
  password_hash_gt: String
  password_hash_gte: String
  password_hash_contains: String
  password_hash_not_contains: String
  password_hash_starts_with: String
  password_hash_not_starts_with: String
  password_hash_ends_with: String
  password_hash_not_ends_with: String
  password_salt: String
  password_salt_not: String
  password_salt_in: [String!]
  password_salt_not_in: [String!]
  password_salt_lt: String
  password_salt_lte: String
  password_salt_gt: String
  password_salt_gte: String
  password_salt_contains: String
  password_salt_not_contains: String
  password_salt_starts_with: String
  password_salt_not_starts_with: String
  password_salt_ends_with: String
  password_salt_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  last_login_date: DateTime
  last_login_date_not: DateTime
  last_login_date_in: [DateTime!]
  last_login_date_not_in: [DateTime!]
  last_login_date_lt: DateTime
  last_login_date_lte: DateTime
  last_login_date_gt: DateTime
  last_login_date_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  roles: UserUpdaterolesInput
  password_hash: String
  password_salt: String
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantUpdateManyWithoutUserInput
  contacts: UserUpdateManyInput
}

input UserUpdateInput {
  email: String
  roles: UserUpdaterolesInput
  password_hash: String
  password_salt: String
  avatar: String
  last_login_date: DateTime
  conversations: ConversationParticipantUpdateManyWithoutUserInput
  contacts: UserUpdateManyInput
}

input UserUpdateManyDataInput {
  email: String
  roles: UserUpdaterolesInput
  password_hash: String
  password_salt: String
  avatar: String
  last_login_date: DateTime
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  roles: UserUpdaterolesInput
  password_hash: String
  password_salt: String
  avatar: String
  last_login_date: DateTime
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutConversationsInput {
  create: UserCreateWithoutConversationsInput
  update: UserUpdateWithoutConversationsDataInput
  upsert: UserUpsertWithoutConversationsInput
  connect: UserWhereUniqueInput
}

input UserUpdaterolesInput {
  set: [UserRole!]
}

input UserUpdateWithoutConversationsDataInput {
  email: String
  roles: UserUpdaterolesInput
  password_hash: String
  password_salt: String
  avatar: String
  last_login_date: DateTime
  contacts: UserUpdateManyInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutConversationsInput {
  update: UserUpdateWithoutConversationsDataInput!
  create: UserCreateWithoutConversationsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password_hash: String
  password_hash_not: String
  password_hash_in: [String!]
  password_hash_not_in: [String!]
  password_hash_lt: String
  password_hash_lte: String
  password_hash_gt: String
  password_hash_gte: String
  password_hash_contains: String
  password_hash_not_contains: String
  password_hash_starts_with: String
  password_hash_not_starts_with: String
  password_hash_ends_with: String
  password_hash_not_ends_with: String
  password_salt: String
  password_salt_not: String
  password_salt_in: [String!]
  password_salt_not_in: [String!]
  password_salt_lt: String
  password_salt_lte: String
  password_salt_gt: String
  password_salt_gte: String
  password_salt_contains: String
  password_salt_not_contains: String
  password_salt_starts_with: String
  password_salt_not_starts_with: String
  password_salt_ends_with: String
  password_salt_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  last_login_date: DateTime
  last_login_date_not: DateTime
  last_login_date_in: [DateTime!]
  last_login_date_not_in: [DateTime!]
  last_login_date_lt: DateTime
  last_login_date_lte: DateTime
  last_login_date_gt: DateTime
  last_login_date_gte: DateTime
  conversations_every: ConversationParticipantWhereInput
  conversations_some: ConversationParticipantWhereInput
  conversations_none: ConversationParticipantWhereInput
  contacts_every: UserWhereInput
  contacts_some: UserWhereInput
  contacts_none: UserWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  password_salt: String
}
`
      }
    