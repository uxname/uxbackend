// Code generated by Prisma (prisma@1.19.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  activationCode: (where?: ActivationCodeWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activationCode: (where: ActivationCodeWhereUniqueInput) => ActivationCode;
  activationCodes: (
    args?: {
      where?: ActivationCodeWhereInput;
      orderBy?: ActivationCodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ActivationCodeNode>;
  activationCodesConnection: (
    args?: {
      where?: ActivationCodeWhereInput;
      orderBy?: ActivationCodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ActivationCodeConnection;
  category: (where: CategoryWhereUniqueInput) => Category;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CategoryNode>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnection;
  product: (where: ProductWhereUniqueInput) => Product;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ProductNode>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivationCode: (data: ActivationCodeCreateInput) => ActivationCode;
  updateActivationCode: (
    args: {
      data: ActivationCodeUpdateInput;
      where: ActivationCodeWhereUniqueInput;
    }
  ) => ActivationCode;
  updateManyActivationCodes: (
    args: { data: ActivationCodeUpdateInput; where?: ActivationCodeWhereInput }
  ) => BatchPayload;
  upsertActivationCode: (
    args: {
      where: ActivationCodeWhereUniqueInput;
      create: ActivationCodeCreateInput;
      update: ActivationCodeUpdateInput;
    }
  ) => ActivationCode;
  deleteActivationCode: (
    where: ActivationCodeWhereUniqueInput
  ) => ActivationCode;
  deleteManyActivationCodes: (where?: ActivationCodeWhereInput) => BatchPayload;
  createCategory: (data: CategoryCreateInput) => Category;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => Category;
  updateManyCategories: (
    args: { data: CategoryUpdateInput; where?: CategoryWhereInput }
  ) => BatchPayload;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => Category;
  deleteCategory: (where: CategoryWhereUniqueInput) => Category;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayload;
  createProduct: (data: ProductCreateInput) => Product;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => Product;
  updateManyProducts: (
    args: { data: ProductUpdateInput; where?: ProductWhereInput }
  ) => BatchPayload;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => Product;
  deleteProduct: (where: ProductWhereUniqueInput) => Product;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activationCode: (
    where?: ActivationCodeSubscriptionWhereInput
  ) => ActivationCodeSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActivationCodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "valid_until_ASC"
  | "valid_until_DESC"
  | "code_ASC"
  | "code_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRole = "USER" | "MODERATOR" | "ADMIN";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_hash_ASC"
  | "password_hash_DESC"
  | "password_salt_ASC"
  | "password_salt_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "last_login_date_ASC"
  | "last_login_date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface CategoryCreateWithoutProductsInput {
  title: String;
  description?: String;
  subcategories?: CategoryCreateManyInput;
}

export interface CategoryUpdateWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateDataInput;
}

export interface CategoryUpsertWithWhereUniqueNestedInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export type ActivationCodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface UserUpdaterolesInput {
  set?: UserRole[] | UserRole;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password_hash?: String;
  password_hash_not?: String;
  password_hash_in?: String[] | String;
  password_hash_not_in?: String[] | String;
  password_hash_lt?: String;
  password_hash_lte?: String;
  password_hash_gt?: String;
  password_hash_gte?: String;
  password_hash_contains?: String;
  password_hash_not_contains?: String;
  password_hash_starts_with?: String;
  password_hash_not_starts_with?: String;
  password_hash_ends_with?: String;
  password_hash_not_ends_with?: String;
  password_salt?: String;
  password_salt_not?: String;
  password_salt_in?: String[] | String;
  password_salt_not_in?: String[] | String;
  password_salt_lt?: String;
  password_salt_lte?: String;
  password_salt_gt?: String;
  password_salt_gte?: String;
  password_salt_contains?: String;
  password_salt_not_contains?: String;
  password_salt_starts_with?: String;
  password_salt_not_starts_with?: String;
  password_salt_ends_with?: String;
  password_salt_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  last_login_date?: DateTimeInput;
  last_login_date_not?: DateTimeInput;
  last_login_date_in?: DateTimeInput[] | DateTimeInput;
  last_login_date_not_in?: DateTimeInput[] | DateTimeInput;
  last_login_date_lt?: DateTimeInput;
  last_login_date_lte?: DateTimeInput;
  last_login_date_gt?: DateTimeInput;
  last_login_date_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserCreaterolesInput {
  set?: UserRole[] | UserRole;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProductWhereInput;
  AND?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  OR?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
  NOT?: ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateWithoutCategoriesDataInput;
  create: ProductCreateWithoutCategoriesInput;
}

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  subcategories_every?: CategoryWhereInput;
  subcategories_some?: CategoryWhereInput;
  subcategories_none?: CategoryWhereInput;
  products_every?: ProductWhereInput;
  products_some?: ProductWhereInput;
  products_none?: ProductWhereInput;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface ProductUpdateWithoutCategoriesDataInput {
  title?: String;
  description?: String;
}

export interface ActivationCodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActivationCodeWhereInput;
  AND?:
    | ActivationCodeSubscriptionWhereInput[]
    | ActivationCodeSubscriptionWhereInput;
  OR?:
    | ActivationCodeSubscriptionWhereInput[]
    | ActivationCodeSubscriptionWhereInput;
  NOT?:
    | ActivationCodeSubscriptionWhereInput[]
    | ActivationCodeSubscriptionWhereInput;
}

export interface ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateWithoutCategoriesDataInput;
}

export interface CategoryUpdateWithoutProductsDataInput {
  title?: String;
  description?: String;
  subcategories?: CategoryUpdateManyInput;
}

export interface CategoryUpdateManyWithoutProductsInput {
  create?:
    | CategoryCreateWithoutProductsInput[]
    | CategoryCreateWithoutProductsInput;
  delete?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  disconnect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  update?:
    | CategoryUpdateWithWhereUniqueWithoutProductsInput[]
    | CategoryUpdateWithWhereUniqueWithoutProductsInput;
  upsert?:
    | CategoryUpsertWithWhereUniqueWithoutProductsInput[]
    | CategoryUpsertWithWhereUniqueWithoutProductsInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ActivationCodeCreateInput {
  email: String;
  valid_until: DateTimeInput;
  code: String;
}

export interface CategoryCreateManyWithoutProductsInput {
  create?:
    | CategoryCreateWithoutProductsInput[]
    | CategoryCreateWithoutProductsInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
}

export interface ActivationCodeUpdateInput {
  email?: String;
  valid_until?: DateTimeInput;
  code?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  password_salt?: String;
}>;

export interface ProductUpdateManyWithoutCategoriesInput {
  create?:
    | ProductCreateWithoutCategoriesInput[]
    | ProductCreateWithoutCategoriesInput;
  delete?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  disconnect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
  update?:
    | ProductUpdateWithWhereUniqueWithoutCategoriesInput[]
    | ProductUpdateWithWhereUniqueWithoutCategoriesInput;
  upsert?:
    | ProductUpsertWithWhereUniqueWithoutCategoriesInput[]
    | ProductUpsertWithWhereUniqueWithoutCategoriesInput;
}

export interface UserCreateInput {
  email: String;
  roles?: UserCreaterolesInput;
  password_hash: String;
  password_salt: String;
  avatar?: String;
  last_login_date?: DateTimeInput;
}

export interface CategoryUpdateDataInput {
  title?: String;
  description?: String;
  subcategories?: CategoryUpdateManyInput;
  products?: ProductUpdateManyWithoutCategoriesInput;
}

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  categories_every?: CategoryWhereInput;
  categories_some?: CategoryWhereInput;
  categories_none?: CategoryWhereInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface CategoryCreateInput {
  title: String;
  description?: String;
  subcategories?: CategoryCreateManyInput;
  products?: ProductCreateManyWithoutCategoriesInput;
}

export interface CategoryUpdateWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput;
  data: CategoryUpdateWithoutProductsDataInput;
}

export interface CategoryCreateManyInput {
  create?: CategoryCreateInput[] | CategoryCreateInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CategoryUpdateManyInput {
  create?: CategoryCreateInput[] | CategoryCreateInput;
  update?:
    | CategoryUpdateWithWhereUniqueNestedInput[]
    | CategoryUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CategoryUpsertWithWhereUniqueNestedInput[]
    | CategoryUpsertWithWhereUniqueNestedInput;
  delete?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  connect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
  disconnect?: CategoryWhereUniqueInput[] | CategoryWhereUniqueInput;
}

export interface CategoryUpdateInput {
  title?: String;
  description?: String;
  subcategories?: CategoryUpdateManyInput;
  products?: ProductUpdateManyWithoutCategoriesInput;
}

export interface ProductCreateWithoutCategoriesInput {
  title: String;
  description?: String;
}

export interface ProductCreateManyWithoutCategoriesInput {
  create?:
    | ProductCreateWithoutCategoriesInput[]
    | ProductCreateWithoutCategoriesInput;
  connect?: ProductWhereUniqueInput[] | ProductWhereUniqueInput;
}

export interface ProductCreateInput {
  title: String;
  description?: String;
  categories?: CategoryCreateManyWithoutProductsInput;
}

export interface ProductUpdateInput {
  title?: String;
  description?: String;
  categories?: CategoryUpdateManyWithoutProductsInput;
}

export interface ActivationCodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  valid_until?: DateTimeInput;
  valid_until_not?: DateTimeInput;
  valid_until_in?: DateTimeInput[] | DateTimeInput;
  valid_until_not_in?: DateTimeInput[] | DateTimeInput;
  valid_until_lt?: DateTimeInput;
  valid_until_lte?: DateTimeInput;
  valid_until_gt?: DateTimeInput;
  valid_until_gte?: DateTimeInput;
  code?: String;
  code_not?: String;
  code_in?: String[] | String;
  code_not_in?: String[] | String;
  code_lt?: String;
  code_lte?: String;
  code_gt?: String;
  code_gte?: String;
  code_contains?: String;
  code_not_contains?: String;
  code_starts_with?: String;
  code_not_starts_with?: String;
  code_ends_with?: String;
  code_not_ends_with?: String;
  AND?: ActivationCodeWhereInput[] | ActivationCodeWhereInput;
  OR?: ActivationCodeWhereInput[] | ActivationCodeWhereInput;
  NOT?: ActivationCodeWhereInput[] | ActivationCodeWhereInput;
}

export interface CategoryUpsertWithWhereUniqueWithoutProductsInput {
  where: CategoryWhereUniqueInput;
  update: CategoryUpdateWithoutProductsDataInput;
  create: CategoryCreateWithoutProductsInput;
}

export interface UserUpdateInput {
  email?: String;
  roles?: UserUpdaterolesInput;
  password_hash?: String;
  password_salt?: String;
  avatar?: String;
  last_login_date?: DateTimeInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  roles: UserRole[];
  password_hash: String;
  password_salt: String;
  avatar?: String;
  last_login_date?: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  roles: () => Promise<UserRole[]>;
  password_hash: () => Promise<String>;
  password_salt: () => Promise<String>;
  avatar: () => Promise<String>;
  last_login_date: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<UserRole[]>>;
  password_hash: () => Promise<AsyncIterator<String>>;
  password_salt: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  last_login_date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategoryNode {
  id: ID_Output;
  title: String;
  description?: String;
}

export interface Category extends Promise<CategoryNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  subcategories: <T = FragmentableArray<CategoryNode>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = FragmentableArray<ProductNode>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<CategoryNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  subcategories: <T = Promise<AsyncIterator<CategorySubscription>>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  products: <T = Promise<AsyncIterator<ProductSubscription>>>(
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ActivationCodeNode {
  id: ID_Output;
  email: String;
  valid_until: DateTimeOutput;
  code: String;
}

export interface ActivationCode
  extends Promise<ActivationCodeNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  valid_until: () => Promise<DateTimeOutput>;
  code: () => Promise<String>;
}

export interface ActivationCodeSubscription
  extends Promise<AsyncIterator<ActivationCodeNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  valid_until: () => Promise<AsyncIterator<DateTimeOutput>>;
  code: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActivationCodeNode {
  count: Int;
}

export interface AggregateActivationCode
  extends Promise<AggregateActivationCodeNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivationCodeSubscription
  extends Promise<AsyncIterator<AggregateActivationCodeNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivationCodeEdgeNode {
  cursor: String;
}

export interface ActivationCodeEdge
  extends Promise<ActivationCodeEdgeNode>,
    Fragmentable {
  node: <T = ActivationCode>() => T;
  cursor: () => Promise<String>;
}

export interface ActivationCodeEdgeSubscription
  extends Promise<AsyncIterator<ActivationCodeEdgeNode>>,
    Fragmentable {
  node: <T = ActivationCodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  roles: UserRole[];
  password_hash: String;
  password_salt: String;
  avatar?: String;
  last_login_date?: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  roles: () => Promise<UserRole[]>;
  password_hash: () => Promise<String>;
  password_salt: () => Promise<String>;
  avatar: () => Promise<String>;
  last_login_date: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<UserRole[]>>;
  password_hash: () => Promise<AsyncIterator<String>>;
  password_salt: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  last_login_date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductEdgeNode {
  cursor: String;
}

export interface ProductEdge extends Promise<ProductEdgeNode>, Fragmentable {
  node: <T = Product>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdgeNode>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivationCodeConnectionNode {}

export interface ActivationCodeConnection
  extends Promise<ActivationCodeConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ActivationCodeEdgeNode>>() => T;
  aggregate: <T = AggregateActivationCode>() => T;
}

export interface ActivationCodeConnectionSubscription
  extends Promise<AsyncIterator<ActivationCodeConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivationCodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivationCodeSubscription>() => T;
}

export interface AggregateCategoryNode {
  count: Int;
}

export interface AggregateCategory
  extends Promise<AggregateCategoryNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategoryNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductPreviousValuesNode {
  id: ID_Output;
  title: String;
  description?: String;
}

export interface ProductPreviousValues
  extends Promise<ProductPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface CategoryConnectionNode {}

export interface CategoryConnection
  extends Promise<CategoryConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CategoryEdgeNode>>() => T;
  aggregate: <T = AggregateCategory>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface ActivationCodeSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ActivationCodeSubscriptionPayload
  extends Promise<ActivationCodeSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivationCode>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivationCodePreviousValues>() => T;
}

export interface ActivationCodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivationCodeSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivationCodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivationCodePreviousValuesSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProductNode {
  count: Int;
}

export interface AggregateProduct
  extends Promise<AggregateProductNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProductNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryPreviousValuesNode {
  id: ID_Output;
  title: String;
  description?: String;
}

export interface CategoryPreviousValues
  extends Promise<CategoryPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface CategorySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CategorySubscriptionPayload
  extends Promise<CategorySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Category>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValues>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface ProductSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProductSubscriptionPayload
  extends Promise<ProductSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Product>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValues>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ActivationCodePreviousValuesNode {
  id: ID_Output;
  email: String;
  valid_until: DateTimeOutput;
  code: String;
}

export interface ActivationCodePreviousValues
  extends Promise<ActivationCodePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  valid_until: () => Promise<DateTimeOutput>;
  code: () => Promise<String>;
}

export interface ActivationCodePreviousValuesSubscription
  extends Promise<AsyncIterator<ActivationCodePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  valid_until: () => Promise<AsyncIterator<DateTimeOutput>>;
  code: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnectionNode {}

export interface ProductConnection
  extends Promise<ProductConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ProductEdgeNode>>() => T;
  aggregate: <T = AggregateProduct>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProductNode {
  id: ID_Output;
  title: String;
  description?: String;
}

export interface Product extends Promise<ProductNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  categories: <T = FragmentableArray<CategoryNode>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<ProductNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  categories: <T = Promise<AsyncIterator<CategorySubscription>>>(
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CategoryEdgeNode {
  cursor: String;
}

export interface CategoryEdge extends Promise<CategoryEdgeNode>, Fragmentable {
  node: <T = Category>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdgeNode>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
